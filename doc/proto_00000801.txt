Detailed specification of protocol in version 00000801
======================================================

Note: work in progress!!

Changes from 00000800 to 00000801:
 - Add HMAC-MD5 (truncated to 32 bits) to all data packets
   as checksum and authentication.
 - Add HMAC-MD5 (truncated to 96 bits) to all control packets
 - Improve CMC to be 32-bit incremental "replay protection counter"
 - Allow security level negotiation (enabled/disabled)
 - Increase size of login challenge
 - Add client to server login challenge
 - Remove ACKs entirely
 - Replace TCP forwarding with UDP forwarding
 - Upstream data header now uses same encoding as data

======================================================
1. DNS protocol
======================================================

----------------------------------------
1.1 Quick alphabetical index / register:
----------------------------------------


	0-9	Data packet
	A-F	Data packet
	I	IP address
	L	Login
	N	Downstream fragsize	(NS.topdomain A-type reply)
	O	Options
	P	Ping
	R	Downstream fragsize probe
	S	Switch upstream codec
	V	Version
	W				(WWW.topdomain A-type reply)
	Y	Downstream codec check
	Z	Upstream codec check

CMC = Cache Miss Counter, increased every time it is used

---------------------------------------
1.2 Unauthenticated packets (pre-login)
---------------------------------------

Upstream codec check / bounce:
Client sends:
	First byte z or Z
	Lots of data that should not be decoded
Server replies:
	The requested domain copied raw, in the lowest-grade downstream codec
	available for the request type.

Downstream codec check:
Client sends:
	First byte y or Y
	1 char, meaning downstream codec to use
	5 bits coded as Base32 char, meaning check variant
	CMC as 3 Base32 chars
	Possibly extra data, depending on check variant
Server sends:
	Data encoded with requested downstream codec; data content depending
	on check variant number.
	BADCODEC if requested downstream codec not available.
	BADLEN if check variant is not available, or problem with extra data.

	Downstream codec chars are same as in 'O' Option request, below.

	Check variants:
	1: Send encoded DOWNCODECCHECK1 string as defined in encoding.h

	(Other variants reserved; possibly variant that sends a decoded-encoded
	copy of Base32-encoded extra data in the request)

-----------------
1.3 Login process
-----------------

Version:
Client sends:
	First byte v or V
	Rest encoded with base32:
	4 bytes big endian protocol version
	4 bytes CMC
Server replies:
	1 char:
		A (version ok), followed by login challenge
		N (version differs), followed by server protocol version
		F (server has no free slots), followed by max users
	4 byte value: means new userid/server protocol version/max users
	16 byte server login challenge

Login:
Client sends:
	First byte l or L
	1 byte userid char (hex)
	Rest encoded with base32:
	1 byte flags: (least to most significant bits)
		0: connect to remote TCP port (data pipe/ProxyCommand mode)
		1: use non-localhost remote IP
		2: remote IP is IPv6
		3: check forward connected status
		4-8: unused
	16 bytes hash of password + server login challenge
	16 bytes client login challenge
	2 bytes remote UDP port (big endian) - appears only when flags bit 0 is set
	4-16 bytes remote IP address (4 bytes if IPv4 or 16 for IPv6) - included
		 only if flags bits 0, 1 are set)
	4 bytes CMC
Server replies:
	1 char flag, followed by:
		4 bytes server IPv4 address (network byte order)
		4 bytes client IPv4 address (network byte order)
		2 bytes MTU (network byte order)
		1 byte netmask bits (like CIDR)
	16 bytes hash of password + client login challenge
	4 bytes CMC
	12 bytes HMAC
	
	flag can be one of:
		N: either auth or options not accepted (LNAK)
		I: Login success (followed by IP addresses)
If the requested UDP forwarding options are not accepted by the server, the
response is simply LNAK.
Since UDP is connectionless, the server just sends packets to the given IP/port
when data is received from the client, and will forward any packets received from
that same IP/port back to the client.

The login process is described as follows:
	1. Successful version check; server provides a 16-byte login challenge to
		the client.
	2. The client performs bitwise XOR with the MD5 hash of the password and
		the server login challenge. The client generates a random 16-byte
		client login challenge which is sent with the MD5 hash of the password
		to the server in a login packet.
	3. The server performs bitwise XOR with the MD5 hash of the password and
		the client login challenge and replies to the login query. From this
		point onwards, all packets are signed with HMAC.

------------------------------------------------
1.4 Authenticated packets (after login complete)
------------------------------------------------

IP Request: (for where to try raw login)
Client sends:
	First byte i or I
	1 byte userid char (hex)
	Rest encoded in base32:
	4 bytes CMC
	12 bytes HMAC
Server replies:
	BADIP if bad authentication, or:
	1 char 'I'
	1 byte length of IP address
	Then comes external IP address of iodined server
	as 4 bytes (IPv4) or 16 bytes (IPv6)
	4 bytes CMC
	12 bytes HMAC


Switch upstream codec:
Client sends:
	First byte s or S
	1 byte userid char (hex)
	rest encoded in base32:
	1 byte meaning number of bits per encoded byte in new codec:
		5: Base32   (a-z0-5)
		6: Base64   (a-zA-Z0-9+-)
		26: Base64u (a-zA-Z0-9_-)
		7: Base128  (a-zA-Z0-9\274-\375)
	4 bytes CMC
	12 bytes HMAC
Server sends:
	BADCODEC if not accepted. Client must then revert to previous codec
	BADLEN if length of query is too short
	BADIP if bad auth
	1 byte length of codec name if accepted
	Human readable name of codec. (After this all upstream data packets
		must be encoded with the new codec.)
	4 bytes CMC
	12 bytes HMAC

Set Options:
Client sends:
	First byte o or O
	1 byte userid char (hex)
	rest encoded in base32:
	1 byte option flags:
	0        1
    +76543210+
    |0TSUVRCL|
    +--------+
    4 bytes CMC
    12 bytes HMAC
Server sends:
	BADCODEC if not accepted. Previous situation remains.
	BADLEN if number of options doesn't match length of query.
	BADIP if bad auth, or:
	1 byte length of encoding type string
	n bytes full name of encoding type used if successful (case insensitive).
	4 bytes CMC
	12 bytes HMAC
Option flags:
	T: Downstream encoding Base32, for TXT/CNAME/A/MX (default)
	S: Downstream encoding Base64, for TXT/CNAME/A/MX
	U: Downstream encoding Base64u, for TXT/CNAME/A/MX
	V: Downstream encoding Base128, for TXT/CNAME/A/MX
	R: Downstream encoding Raw, for PRIVATE/TXT/NULL (assumed for
		PRIVATE and NULL)
	C: Downstream compression enabled (compressed before encoding)
	L: Lazy mode enabled, server will keep a number of requests waiting until
		data becomes available to send downstream or the requests time out.
		The timeout value for requests is controlled by the client.
		Applies only to data transfer; handshake is always answered immediately.
	If codec unsupported for request type, server will use Base32; note
	that server will answer any mix of request types that a client sends.
	Server may disregard the encoding options; client must always use the
	downstream encoding type indicated in every downstream DNS packet.


Probe downstream fragment size:
Client sends:
	First byte r or R
	1 byte userid char (hex)
	Rest encoded as base32:
	2 bytes fragsize (network byte order)
	4 bytes CMC
	12 bytes HMAC
	Then follows a long random query which contents does not matter.
Server sends:
	BADFRAG if requested length not accepted.
	BADIP if bad auth
	2 bytes requested fragsize (network byte order)
	1 byte random "seed"
	12 bytes HMAC
	Following is (fragsize-16) bytes of data, starting with the random seed,
	and each following byte is incremented with 107.
	This is checked by the client to determine corruption.

Set downstream fragment size:
Client sends:
	First byte n or N
	1 byte userid char (hex)
	Rest encoded with base32:
	2 bytes new downstream fragment size (network byte order)
	4 bytes CMC
	12 bytes HMAC
Server sends:
	BADFRAG if not accepted.
	2 bytes new downstream fragment size. After this all downstream
	payloads will be max (fragsize + 2) bytes long.
	4 bytes CMC
	12 bytes HMAC

--------------------------
1.5 Data packets and pings
--------------------------

Upstream data header:
     76543 21076 54321076 54321076 5432
    +!----+!----+!----!--+--!----!+----+
    |0UUUU|UDCMC| Seq ID | Dn ACK |ACFL|
    +-----+-----+--------+--------+----+

Downstream data header:        |=> only if ping (P) flag set       |
    0        1        2        3        4        5        6 
    +--------+--------+76543210+--------+--------+--------+--------+
    | Seq ID | Up ACK |0EIPACFL|Dn Wsize|Up Wsize|DnWstart|UpWstart|
    +--------+--------+--------+--------+--------+--------+--------+

UUUU = Userid
L = Last fragment flag
A = ACK flag
F = First fragment flag
C = Compression enabled for downstream packet
P = ping flag: extra header present
I = responded to immediately (for RTT calculation) - downstream only
UDCMC = Upstream Data CMC char (base36 [a-z0-9])

Up/Dn Wsize/Wstart = upstream/downstream window size/window start Seq ID 

Upstream data packet starts with 1 byte ASCII hex coded user byte; then
1 char data-CMC; then 4 bytes Base32 encoded header; then comes the payload
data, encoded with the chosen upstream codec.

Downstream data starts with 3 byte header, followed by data, which may be
compressed. If Ping flag is set, another 4 bytes are appended to the header,
containing upstream and downstream window sizes and window start sequence IDs.
The response does not need to contain data. If the server has no data to send,
the response will always include the ping header and the ping flag will be set.

If the TCP forward error (E) flag is set, the TCP connection at the server is
closed and the client sends EOF to stdout and exits.

In NULL and PRIVATE responses, downstream data is always raw. In all other
response types, downstream data is encoded (see Options above).
Encoding type is indicated by 1 prefix char (before the data header):
TXT:
	End result is always DNS-chopped (series of len-prefixed strings
	<=255 bytes)
	t or T: Base32	 encoded before chop, decoded after un-chop
	s or S: Base64	 encoded before chop, decoded after un-chop
	u or U: Base64u	 encoded before chop, decoded after un-chop
	v or V: Base128	 encoded before chop, decoded after un-chop
	r or R: Raw	 no encoding, only DNS-chop
SRV/MX/CNAME/A:
	h or H: Hostname encoded with Base32
	i or I: Hostname encoded with Base64
	j or J: Hostname encoded with Base64u
	k or K: Hostname encoded with Base128
SRV and MX may reply with multiple hostnames, each encoded separately. Each
has a 10-multiple priority, and encoding/decoding is done in strictly
increasing priority sequence 10, 20, 30, etc. without gaps. Note that some DNS
relays will shuffle the answer records in the response.


Ping:
Client sends:
	First byte p or P
	Second byte CMC
	1 byte userid char (hex)
	Rest encoded with Base32:
    0.......3 1..7        8 - 9
    +--------+---+76543210+---+
    |HMAC-MD5|...|000WTANR|CMC|
    +--------+---+--------+---+
    4 bytes (32-bit) HMAC
	1 byte window size (upstream)
	1 byte window size (downstream)
	1 byte window start sequence ID (upstream)
	1 byte window start sequence ID (downstream)
	2 bytes server timeout in ms (net. byte order)
	2 bytes downstream fragment ACK timeout in ms (net. byte order)
	1 byte flags:
		W = update window frag timeout
		T = update server timeout
		A = is ACKing downstream frag
		N = is NACKing downstream frag (unused)
		R = response must contain ping header (data optional)
	4 bytes CMC
	12 bytes HMAC

If R (respond) bit is set, the server responds immediately with a ping+data packet.
The server must also adjust its window sizes to those provided by the client.
If the T but is set, the server sets the user's DNS timeout to the value spec-
ified by the packet.

If the bit corresponding to changing a particular value (ie. window timeout) is
not set, the value should be random. (note: this is disabled in debug mode).

In lazy mode, unless the R flag is set, the server will hold the ping until it
times out or more data becomes available to send.

Protocol security
=================

With the introduction of protocol 00000801, iodine now requires all packets
sent from both the server and clients after a successful login to include a
32-bit (incremental) replay-protection counter and be signed with a 32- or
96-bit (truncated) HMAC-MD5 digest. This aims to ensure that the packets have
not been modified or corrupted during transmission, and to provide some
protection against replay attacks. Additionally the HMAC makes it possible
to check if packets have been truncated by intermediate DNS servers.

The HMAC component of the authentication is calculated using the HMAC-MD5 algorithm
according to RFC 2104. The key is calculated according to the following process:
	1. Calculate the MD5 hash of the plaintext password
	2. Calculate the MD5 hash of the server challenge
	3. Calculate the MD5 hash of the client challenge
	4. Append the highest 8 bytes of the result from (2) and the lowest 8 bytes
		of the result from (3) to the result from (1)
	5. Calculate the MD5 hash of the result from (4), this is the key for the HMAC

Since iodine authentication is based on MD5, which can no longer be considered
to be cryptographically secure, it is not possible to claim that the protocol
is resistant to tampering. Furthermore, it is likely that 32-bit HMACs are not
sufficient using any algorithm to guarantee the authenticity of the data.
While the addition of HMAC in protocol 00000801 may provide some level of security,
it does not provide any guarantee that your iodine session can not be hijacked
and must not give peace of mind to the iodine user.

Replay protection existed in previous versions of the protocol in the form of
the CMC (Cache Miss Counter) however this functions primarily to prevent DNS
servers from sending cached replies to iodine queries. This source of packet
replays is limited to some degree by the use of the CMC but since neither the
client or server keeps track of which CMC values have been seen before, so it
remains possible that intermediate DNS servers will repeat queries (with a
valid HMAC) that can disrupt iodine sessions.
Possibly the simplest way to avoid this is to include a 32-bit incremental
CMC in the packet header which can easily be tested to be unique based on
whether or not packets have been seen with higher CMC values. 


"Lazy-mode" operation
=====================

Client-server DNS traffic sequence has been reordered to provide increased
(interactive) performance and greatly reduced latency.

Idea taken from Lucas Nussbaum's slides (24th IFIP International Security
Conference, 2009) at http://www.loria.fr/~lnussbau/tuns.html. Current
implementation is original to iodine, no code or documentation from any other
project was consulted during development.

Server:
In lazy mode, except where otherwise specified, responses are sent using the
oldest pending query held in the server's buffer (QMEM). The server responds
to a stored pending query when the query times out, an upstream ACK is pending
(for that user), or the server has an excess of pending queries (more than the
user's downstream window size).

Upstream data fragments are ACK'd immediately to keep data flowing.

Upstream pings are answered immediately only when the Respond flag is set (see
ping header), in which case the response is to the same DNS query as the ping.
Immediate responses (<10ms old) to either ping or data requests are marked
and used to calculate the round-trip-time for the connection.

Client:
The client keeps track of all queries it sends, and maintains a minimum of
<downstream window size> pending queries to fill the server buffer.
Downstream data is always ACK'd immediately with a new request (either a ping
or data if available). The client sends excess requests (ie. already has enough
pending queries) for ACKs or for new data.


======================================================
2. Raw UDP protocol
======================================================

This protocol is faster since the data is not encoded and transferred
on top of the DNS protocol. Full packets are compressed and sent when they
arrive on the tun device, and are processed immediately on the other side.

All Raw UDP protcol messages start with a 3 byte header: 0x10d19e
This is not the start of a valid DNS message so it is easy to identify.
The fourth byte contains the command (C) and the user id (U).

	 7654 3210
	+----+----+
	|CCCC|UUUU|
	+----+----+

Login message (command = 1):
The header is followed by a MD5 hash with the same password as in the DNS
login. The client starts the raw mode by sending this message, and uses
the login challenge +1, and the server responds using the login challenge -1.
After the login message has been exchanged, both the server and the client
switch to raw udp mode for the rest of the connection.

Data message (command = 2):
After the header comes the payload data, which is always compressed.

Ping message (command = 3):
Sent from client to server and back to keep session open. Has no payload.

