Detailed specification of protocol in version 00000801
======================================================

Note: work in progress!!

Changes from 00000800 to 00000801:
 - Add HMAC-MD5 (truncated to 32 bits) to all data packets
   as checksum and authentication.
 - Add HMAC-MD5 (truncated to 96 bits) to all control packets
 - Improve CMC to be 32-bit incremental "replay protection counter"
 - Allow security level negotiation (enabled/disabled)
 - Increase size of login challenge
 - Add client to server login challenge
 - Remove ACKs entirely
 - Replace TCP forwarding with UDP forwarding and move to options command
 - Upstream data header now uses same encoding as data
 - Add HMAC to raw UDP protocol as well, simplifying raw login

======================================================
1. DNS protocol
======================================================

----------------------------------------
1.1 Quick alphabetical index / register:
----------------------------------------


	0-9	Data packet
	A-F	Data packet
	I	IP address
	K	Connection request
	L	Login
	N	Downstream fragsize	(NS.topdomain A-type reply)
	O	Options
	P	Ping
	R	Downstream fragsize probe
	S	Switch upstream codec
	V	Version
	W				(WWW.topdomain A-type reply)
	Y	Downstream codec check (DEPRECATED)
	Z	Upstream codec check (DEPRECATED)

CMC = Cache Miss Counter, increased every time it is used

----------------------------------------------------------------------
1.2 Unauthenticated commands (pre-login), backwards compatibility only
----------------------------------------------------------------------

Note: These commands are backwards-compatible with previous versions of iodine,
at least to protocol version 00000402. To increase security the function of


Upstream codec check / bounce:
Client sends:
	First byte z or Z
	Lots of data that should not be decoded
Server replies:
	The requested domain copied raw, in the lowest-grade downstream codec
	available for the request type.

Downstream codec check:
Client sends:
	First byte y or Y
	1 char, meaning downstream codec to use
	5 bits coded as Base32 char, meaning check variant
	CMC as 3 Base32 chars
	Possibly extra data, depending on check variant
Server sends:
	Data encoded with requested downstream codec; data content depending
	on check variant number.
	BADCODEC if requested downstream codec not available.
	BADLEN if check variant is not available, or problem with extra data.

	Downstream codec chars are same as in 'O' Option request, below.

	Check variants:
	1: Send encoded DOWNCODECCHECK1 string as defined in encoding.h

	(Other variants reserved; possibly variant that sends a decoded-encoded
	copy of Base32-encoded extra data in the request)

-----------------
1.3 Login process
-----------------

Version:
Client sends (length 1+8):
	First byte v or V
	Rest encoded with base32:
	4 bytes big endian protocol version
	4 bytes random CMC
Server replies (length 28, or 9 if bad version/full):
	4 chars:
		VACK (version ok), followed by login challenge
		VNAK (version differs), followed by server protocol version
		VFUL (server has no free slots), followed by max users
	4 byte value: means new userid/server protocol version/max users
	16 byte server login challenge
	4 byte random CMC
Note: The CMC values are used as a "seed", so following the version command
all queries must be sent with CMC of ((previous CMC + 1) % MAX_UINT32).
The server response also contains random "downstream" CMC which has the same
requirements, although only applies to downstream traffic.

Login:
Client sends (length 2+36):
	First byte l or L
	1 byte userid char (hex)
	Rest encoded with base32:
	4 bytes CMC
	16 bytes hash of password + server login challenge
	16 bytes client login challenge
Server replies (length 31):
	BADAUTH if bad login
	16 bytes hash of password + client login challenge

The login process is outlined as follows:
	1. Successful version check; server provides a 16-byte login challenge to
		the client.
	2. The client performs MD5 hash of (server login challenge XOR MD5 hash of
		password). The client generates a random 16-byte client login challenge
		which is sent with the MD5 hash to the server in a login packet.
	3. The server performs MD5 hash of (server login challenge XOR MD5 hash of
		password) and replies to the login query. From this point onwards,
		all packets are signed with HMAC as described in section "Protocol
		security".

------------------------------------------------
1.4 Authenticated packets (after login complete)
------------------------------------------------

Command I: IP Request (for where to try raw login) (len=0)
	(no command-specific data)
Server replies (len=5-17):
	1 byte length of IP address (4 or 16)
	4 bytes (IPv4) or 16 bytes (IPv6) external IP address of server


Command K: Request data connection (UDP forward or TUN IP)
	1 byte connection mode flags:
	    +76543210+	T flag: request TUN IP
	    |0000URIT|	URI = UDP forward flags
	    +--------+
	0-2 bytes remote UDP port (network byte order): 0 bytes if URI=0XX,
		2 bytes if URI=1XX
	0-16 bytes remote IP address: 0 bytes if URI=100, 4 bytes if URI=110 (IPv4)
		or 16 bytes if URI=111 (IPv6)
Server replies:
	BADOPTS if not accepted, no data follows
	1 byte copy of connection mode flags
	4 bytes server IPv4 address (network byte order)
	4 bytes client IPv4 address (network byte order)
	2 bytes MTU (network byte order)
	1 byte netmask bits (like CIDR)
	
	If UDP forwarding enabled, the client will no longer receive data from the
	server's TUN device.


Command S: Switch upstream codec (len=1)
	1 byte codec type (see codec types in section "Query and response format")
Server sends:
	BADOPTS if not accepted. Client must then revert to previous codec
	1 byte codec type if accepted
	After this command all upstream data packets must be encoded with the new codec.


Command O: Set options (len 1)
	1 byte option flags:
    +76543210+
    |URILKCCC|
    +--------+
	0-2 bytes remote UDP port (network byte order): 0 bytes if URI=0XX,
		2 bytes if URI=1XX
	0-16 bytes remote IP address: 0 bytes if URI=100, 4 bytes if URI=110 (IPv4)
		or 16 bytes if URI=111 (IPv6)
Server sends:
	BADOPTS if options rejected. Previous situation remains.
	1 byte = flag byte sent by client if all options accepted
Option flags:
	U: UDP forward enabled
	R: Remote IP address is NOT localhost
	I: 0=IPv4, 1=IPv6
	L: Lazy mode enabled, server will keep a number of requests waiting until
		data becomes available to send downstream or the requests time out.
		The timeout value for requests is controlled by the client.
		Applies only to data transfer; handshake is always answered immediately.
		See section "Lazy mode operation".
	K: Downstream compression enabled (compressed before encoding)
	CCC: Codec field (see codec types in section "Query and response format")
	If codec unsupported for request type, server will use Base32; note
	that server will answer any mix of request types that a client sends.
	Server may disregard the encoding options; client must always use the
	downstream encoding type indicated in every downstream DNS packet.
	Since UDP is connectionless, the server just sends packets to the given
	IP/port	when data is received from the client, and will forward any packets
	received from that same IP/port back to the client.


Command R: Probe downstream fragment size (len=2+...)
	2 bytes fragsize (network byte order)
	Then follows a long random query which contents does not matter.
Server sends (len=3+fragsize-16):
	BADOPTS if requested length not accepted.
	2 bytes requested fragsize (network byte order)
	1 byte random "seed"
	Following is (fragsize-16) bytes of data, starting with the random seed,
	and each following byte is incremented with 107.
	This is checked by the client to determine corruption.


Command N: Set downstream fragsize (len=2)
	2 bytes new downstream fragment size (network byte order)
Server sends (len 2):
	BADOPTS if not accepted.
	2 bytes new downstream fragment size. After this all downstream
	payloads will be max fragsize bytes long.

--------------------------
1.5 Data packets and pings
--------------------------

Upstream data (len 1+8+2+data):
	1 char ASCII hex coded user ID
	rest encoded with chosen upstream codec (default base32):
    4 bytes CMC
    4 bytes HMAC
	1 byte flags:
     76543210
    +--------+
    |00000CFL|
    +--------+
    1 byte packet sequence ID

Downstream data header (len 2+data):
	1 byte sequence ID
	1 byte flags
	                  |=> only if ping (P) flag set       |
    0        1        3        4        5        6        7
    +--------+76543210+--------+--------+--------+--------+
    | Seq ID |0EIPACFL|Dn Wsize|Up Wsize|DnWstart|UpWstart| (+ data...)
    +--------+--------+--------+--------+--------+--------+

Flags and fields:
	UUUU = Userid
	L = Last fragment flag
	A = ACK flag
	F = First fragment flag
	C = Compression enabled
	P = ping flag: extra header present - downstream only
	I = responded to immediately (for RTT calculation) - downstream only
	Up/Dn Wsize/Wstart = upstream/downstream window size/window start Seq ID 

Downstream data starts with 2 byte header, followed by data, which may be
compressed. If Ping flag is set, another 4 bytes are appended to the header,
containing upstream and downstream window sizes and window start sequence IDs.
The response does not need to contain data. If the server has no data to send,
the response will always include the ping header and the ping flag will be set.

Command P: Ping / control message (len=9)
    0.......7 8
    +--------+76543210+
    |WWWWSSDD|00000WTR|
    +--------+--------+
	1 byte window size (upstream)
	1 byte window size (downstream)
	1 byte window start sequence ID (upstream)
	1 byte window start sequence ID (downstream)
	2 bytes server timeout in ms (net. byte order)
	2 bytes downstream fragment ACK timeout in ms (net. byte order)
	1 byte flags:
		W = update window frag timeout
		T = update server timeout
		R = response must contain ping header (data optional)
Server replies with a (possibly empty) data packet with the ping (P) flag set.
	If R (respond) bit is set, the server responds immediately with a data+ping packet.
	The server must also adjust its window sizes to those provided by the client.
	If the T flag is set, the server sets the user's DNS timeout to the value
	specified by the packet.

If the bit corresponding to changing a particular value (ie. window timeout) is
not set, the value should be random. (note: this is disabled in debug mode).

In lazy mode, unless the R flag is set, the server will hold the ping until it
times out or more data becomes available to send.

-----------------------------
1.7 Query and response format
-----------------------------

The DNS answer header is independent from the command, unlike in upstream
packets. It varies based on the DNS response type, but the contents are always
in the same format once decoded.

In NULL and PRIVATE responses, downstream data (anything returned from the
server, not just data packets) is always raw. In all other response types,
downstream data is encoded (see Options above).

All post-authentication commands have same query hostname structure. Note that
data packets are different (see Upstream data header above).
Client sends (length 2+16+...):
	1 byte cmd char (case insensitive)
	1 byte userid char (hexadecimal [0-9a-fA-F])
	Rest encoded in base32:
	4 bytes CMC
	12 bytes HMAC
	<command-specific data follows>
Standard server replies are as follows (including data):
	BADLEN (if packet length is invalid, ie. too short)
	BADAUTH (if user id/HMAC/CMC is invalid)
	(other error codes are command specific)
	
	1 char base32-encoded flags:
	 +98765+   H    = 0: HMAC is 96-bit, 1: 32-bit
	 |HECCC|   CCC  = Codec type (0-7)
	 +-----+   E    = 0: no error, 1: Codec field = error code
	Rest encoded with specified codec:
	4 bytes CMC (network byte order) (random for pre-login responses)
	4 or 12 bytes HMAC (note: HMAC field is 32-bits random for all pre-login responses)
	<command-specific data follows>

Encoding is determined by value of codec field and response type.
TXT response type:
	End result is always DNS-chopped (series of len-prefixed
	strings <=255 bytes). Data is encoded before chop, decoded after un-chop.
	Raw encoding is possible, however data is still DNS chopped.
SRV/MX/CNAME/A response:
	Data is DNS-hostname encoded as normal which requires "undotify-ing" before
	decoding, and is "dotified" after encoding.
SRV and MX may reply with multiple hostnames, each encoded separately. Each
has a 10-multiple priority, and encoding/decoding is done in strictly
increasing priority sequence 10, 20, 30, etc. without gaps. Note that some DNS
relays will shuffle the answer records in the response.

Codec field values:
	0x2: base32   (a-z0-5)
	0x1: base64   (a-zA-Z0-9+-)
	0x3: base64u  (a-zA-Z0-9_-)
	0x4: base128  (a-zA-Z0-9\274-\375)
	0x0: raw      (\000-\377)
Error codes:
	0x0: BADLEN (packet below minimum length, maybe truncated)
	0x1: BADAUTH (invalid authentication/HMAC/CMC)
	0x2: BADOPTS (options not accepted by server)
	0x3: BADLOGIN (LNAK: login not accepted)

Protocol security
=================

With the introduction of protocol 00000801, iodine now requires all packets
sent from both the server and clients after a successful login to include a
32-bit (incremental) replay-protection counter and be signed with a 32- or
96-bit (truncated) HMAC-MD5 digest. This aims to ensure that the packets have
not been modified or corrupted during transmission, and to provide some
protection against replay attacks. Additionally the HMAC makes it possible
to check if packets have been truncated by intermediate DNS servers.

The HMAC component of the authentication is calculated using the HMAC-MD5 algorithm
according to RFC 2104. The key is calculated according to the following process:
	1. Calculate MD5(plaintext password)
	2. Calculate MD5(server challenge)
	3. Calculate MD5(client challenge)
	4. Append result from (2) to result from (1)
	5. Append result from (3) to result from (4) and pad with 0x2C to 64 bytes
	6. Bitwise XOR result from (5) with 0xB5
	7. Calculate the MD5 hash of the result from (6), this is the key for the HMAC.

The HMAC is calculated as follows for queries:
	1. Packet data and header is assembled (data is not encoded yet).
	2. HMAC field is set to 0.
	3. Data to be encoded is appended to string (ie. cmd + userid chars) at
		beginning of query name.
	4. Length (32 bits, network byte order) is prepended to the result from (3)
		Length = (len of chars at start of query) + (len of raw data) 
	5. HMAC is calculated using the output from (4) and inserted into the HMAC
		field in the data header. The data is then encoded (ie. base32 + dots)
		and the query is sent.

HMAC for responses is calculated following mostly the same procedure with the
following notes:
	- Data includes only that to be encoded in the DNS answer section
	- In step (3) the data to be encoded is appended to the 1-char (b32)
		downstream header.
It should be noted that the codec used is not signed by the HMAC. This would mean
that if the data was intercepted and reencoded differently in such a way that
iodine was still able to decode it, the HMAC would still be valid.

Since iodine authentication is based on MD5, which can no longer be considered
to be cryptographically secure, it is not possible to claim that the protocol
is resistant to tampering. Furthermore, it is likely that 32-bit HMACs are not
sufficient using any algorithm to guarantee the authenticity of the data.
While the addition of HMAC in protocol 00000801 may provide some level of security,
it does not provide any guarantee that your iodine session can not be hijacked
and is not intended to give peace of mind to the iodine user.

Replay protection existed in previous versions of the protocol in the form of
the CMC (Cache Miss Counter) however this functions primarily to prevent DNS
servers from sending cached replies to iodine queries. This source of packet
replays is limited to some degree by the use of the CMC but since neither the
client or server keeps track of which CMC values have been seen before, so it
remains possible that intermediate DNS servers will repeat queries (with a
valid HMAC) that can disrupt iodine sessions.
Possibly the simplest way to avoid this is to include a 32-bit incremental
CMC in the packet header which can easily be tested to be unique based on
whether or not packets have been seen with higher CMC values. 


"Lazy-mode" operation
=====================

Client-server DNS traffic sequence has been reordered to provide increased
(interactive) performance and greatly reduced latency.

Idea taken from Lucas Nussbaum's slides (24th IFIP International Security
Conference, 2009) at http://www.loria.fr/~lnussbau/tuns.html. Current
implementation is original to iodine, no code or documentation from any other
project was consulted during development.

Server:
In lazy mode, except where otherwise specified, responses are sent using the
oldest pending query held in the server's buffer (QMEM). The server responds
to a stored pending query when the query times out, an upstream ACK is pending
(for that user), or the server has an excess of pending queries (more than the
user's downstream window size).

Upstream data fragments are ACK'd immediately to keep data flowing.

Upstream pings are answered immediately only when the Respond flag is set (see
ping header), in which case the response is to the same DNS query as the ping.
Immediate responses (<10ms old) to either ping or data requests are marked
and used to calculate the round-trip-time for the connection.

Client:
The client keeps track of all queries it sends, and maintains a minimum of
<downstream window size> pending queries to fill the server buffer.
Downstream data is always ACK'd immediately with a new request (either a ping
or data if available). The client sends excess requests (ie. already has enough
pending queries) for ACKs or for new data.


======================================================
2. Raw UDP protocol
======================================================

This protocol is faster since the data is not encoded and transferred
on top of the DNS protocol. Full packets are compressed and sent when they
arrive on the tun device, and are processed immediately on the other side.

All Raw UDP protcol messages start with a fixed-length 20-byte header.
This is not the start of a valid DNS message so it is easy to identify.

Raw UDP Header (len=20):
	3 bytes magic:  0x10d19e
	1 byte command (4-bits C) and user id (4-bits U):
		 7654 3210
		+----+----+
		|CCCC|UUUU|
		+----+----+	
	4 bytes CMC/relay protection counter
	12 bytes HMAC

Login message (command = 1):
	16 bytes random data
	This message can only be sent after the full DNS-based login sequence has been
	completed successfully. The client enters raw mode by sending this message,
	which must be signed using the client's 96-bit HMAC.
	After the login message has been exchanged, both the server and the client
	switch to raw udp mode for the rest of the connection.

Data message (command = 2):
	After the header comes the payload data, which is always compressed.

Ping message (command = 3):
	Sent from client to server and back to keep session open. Has no payload.

